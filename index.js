// Generated by CoffeeScript 1.4.0
(function() {
  var EventEmitter2, Switchboard, uuid,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __slice = [].slice;

  EventEmitter2 = require('eventemitter2').EventEmitter2;

  uuid = require('node-uuid');

  Switchboard = (function(_super) {

    __extends(Switchboard, _super);

    function Switchboard() {
      this.evaluateEvent = __bind(this.evaluateEvent, this);

      this.obtainLockAndCall = __bind(this.obtainLockAndCall, this);

      this.resetEvents = __bind(this.resetEvents, this);

      this.vanGogh = __bind(this.vanGogh, this);

      this.once = __bind(this.once, this);

      this.on = __bind(this.on, this);

      this.registerEventArguments = __bind(this.registerEventArguments, this);

      this.destroyHandler = __bind(this.destroyHandler, this);

      this.getArgsForEvents = __bind(this.getArgsForEvents, this);

      this.possibleHandlersForSingleEvent = __bind(this.possibleHandlersForSingleEvent, this);

      this.setArgsForEvent = __bind(this.setArgsForEvent, this);

      this.setUnnamedArgsForEvent = __bind(this.setUnnamedArgsForEvent, this);

      this.setNamedArgsForEvent = __bind(this.setNamedArgsForEvent, this);

      this.hasFired = __bind(this.hasFired, this);
      return Switchboard.__super__.constructor.apply(this, arguments);
    }

    Switchboard.prototype.entries = {};

    Switchboard.prototype._globalEventHandlers = {};

    Switchboard.prototype._hasFired = {};

    Switchboard.prototype.argumentNames = {};

    Switchboard.prototype.firedEventArgumentStore = {};

    Switchboard.prototype.lock = false;

    Switchboard.prototype.hasFired = function(eventNames, val) {
      var allFired, eventName, _i, _len;
      if (!(eventNames instanceof Array)) {
        eventNames = [eventNames];
      }
      allFired = true;
      for (_i = 0, _len = eventNames.length; _i < _len; _i++) {
        eventName = eventNames[_i];
        if (val != null) {
          _hasFired[eventName] = val;
        } else if (_hasFired[eventName] === false) {
          allFired = false;
          break;
        }
      }
      return allFired;
    };

    Switchboard.prototype.setNamedArgsForEvent = function(eventName, eventArgs) {
      var argName, i, _i, _len, _ref, _results;
      _ref = this.argumentNames[eventName];
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        argName = _ref[i];
        _results.push(this.firedEventArgumentStore[eventName][argName] = eventArgs[i]);
      }
      return _results;
    };

    Switchboard.prototype.setUnnamedArgsForEvent = function(eventName, eventArgs) {
      return this.firedEventArgumentStore[eventName] = eventArgs;
    };

    Switchboard.prototype.setArgsForEvent = function(eventName, eventArgs) {
      if (this.argumentNames[eventName] != null) {
        return this.setNamedArgsForEvent(eventName, argName, eventArgs[i]);
      } else {
        return this.setUnnamedArgsForEvent(eventName, eventArgs);
      }
    };

    Switchboard.prototype.possibleHandlersForSingleEvent = function(event) {
      var handlers, uuids, _i, _len;
      handlers = [];
      uuids = Object.keys(this._globalEventHandlers[event]);
      for (_i = 0, _len = uuids.length; _i < _len; _i++) {
        uuid = uuids[_i];
        handlers.push(this.entries[uuid]);
      }
      return handlers;
    };

    Switchboard.prototype.getArgsForEvents = function(events) {
      var args, event, _i, _len;
      args = {};
      for (_i = 0, _len = events.length; _i < _len; _i++) {
        event = events[_i];
        args[event] = this.firedEventArgumentStore[event];
      }
      return args;
    };

    Switchboard.prototype.destroyHandler = function(fnOrUUID) {
      var event, eventsToUnlisten, handler, _i, _j, _len, _len1, _ref, _ref1;
      handler = fnOrUUID;
      if (typeof fnOrUUID === 'string') {
        handler = this.entries[fnOrUUID];
      }
      eventsToUnlisten = handler.events;
      _ref = this.entries;
      for (uuid in _ref) {
        handler = _ref[uuid];
        _ref1 = handler.events;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          event = _ref1[_i];
          if (__indexOf.call(eventsToUnlisten, event) >= 0) {
            eventsToUnlisten = eventsToUnlisten.filter(function(item) {
              return item !== event;
            });
          }
          if (eventsToUnlisten.length === 0) {
            break;
          }
        }
        if (eventsToUnlisten.length === 0) {
          break;
        }
      }
      for (_j = 0, _len1 = eventsToUnlisten.length; _j < _len1; _j++) {
        event = eventsToUnlisten[_j];
        this.removeListener(event, this._globalEventHandlers[event]);
      }
      return delete this.entries[handler.uuid];
    };

    Switchboard.prototype.registerEventArguments = function(events) {
      var args, event, _results;
      _results = [];
      for (event in events) {
        args = events[event];
        _results.push(this.argumentNames[event] = args);
      }
      return _results;
    };

    Switchboard.prototype.on = function(events, callback, once) {
      var event, event_uuid, i, new_entry, _fn, _i, _len,
        _this = this;
      if (once == null) {
        once = false;
      }
      if (!(events instanceof Array)) {
        events = [events];
      }
      event_uuid = uuid.v4();
      new_entry = function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return callback.apply(null, args);
      };
      new_entry.uuid = event_uuid;
      new_entry.events = events;
      new_entry.once = once;
      this.entries[event_uuid] = new_entry;
      _fn = function(event) {
        var handlerFn;
        if (_this._globalEventHandlers[event] == null) {
          handlerFn = function() {
            var args;
            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return _this.evaluateEvent.apply(_this, [event].concat(__slice.call(args)));
          };
          _this._globalEventHandlers[event] = handlerFn;
          if (once) {
            return _this.once(event, handlerFn);
          } else {
            return _fn.__super__.constructor.call(_this, event, handlerFn);
          }
        }
      };
      for (i = _i = 0, _len = events.length; _i < _len; i = ++_i) {
        event = events[i];
        _fn(event);
      }
      return event_uuid;
    };

    Switchboard.prototype.once = function(events, callback) {
      return this.on(events, callback, true);
    };

    Switchboard.prototype.vanGogh = function(uuids) {
      var _i, _len, _results;
      if (!(uuids != null)) {
        uuids = Object.keys(this.entries);
      }
      if (!(uuids instanceof Array)) {
        uuids = [uuids];
      }
      _results = [];
      for (_i = 0, _len = uuids.length; _i < _len; _i++) {
        uuid = uuids[_i];
        _results.push(this.destroyHandler(uuid));
      }
      return _results;
    };

    Switchboard.prototype.resetEvents = function(events) {
      var event, _results;
      if (!(events != null)) {
        return this._hasFired = [];
      } else {
        if (!(events instanceof Array)) {
          events = [events];
        }
        _results = [];
        for (event in events) {
          _results.push(delete this._hasFired[event]);
        }
        return _results;
      }
    };

    Switchboard.prototype.obtainLockAndCall = function() {
      var args, fn;
      fn = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return fn(args);
    };

    Switchboard.prototype.evaluateEvent = function(eventName, eventArgs) {
      var args, handler, possibleHandlers, _i, _len, _results;
      this.hasFired(eventName, true);
      this.setArgsForEvent(eventName, eventArgs);
      possibleHandlers = this.possibleHandlersForSingleEvent(eventName);
      _results = [];
      for (_i = 0, _len = possibleHandlers.length; _i < _len; _i++) {
        handler = possibleHandlers[_i];
        if (this.hasFired(handler.events) === true) {
          args = this.getArgsForEvents(handler.events);
          handler(args);
          if (handler.once === true) {
            _results.push(this.destroyHandler(handler));
          } else {
            _results.push(void 0);
          }
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    return Switchboard;

  })(EventEmitter2);

  (typeof exports !== "undefined" && exports !== null ? exports : window).Switchboard = Switchboard;

}).call(this);
