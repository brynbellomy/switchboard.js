// Generated by CoffeeScript 1.4.0
(function() {
  var Emitter, EventEmitter, EventEmitter2, nodeUUID, uuid, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __slice = [].slice;

  EventEmitter2 = void 0;

  EventEmitter = void 0;

  nodeUUID = void 0;

  if (typeof window !== "undefined" && window !== null) {
    EventEmitter2 = window.EventEmitter2, EventEmitter = window.EventEmitter, Emitter = window.Emitter, uuid = window.uuid;
  } else if (typeof require !== "undefined" && require !== null) {
    try {
      EventEmitter2 = require('eventemitter2').EventEmitter2;
    } catch (err) {
      EventEmitter = require('events').EventEmitter;
    }
    nodeUUID = require('node-uuid');
  }

  exports.Switchboard = (function(_super) {

    __extends(Switchboard, _super);

    function Switchboard() {
      this.evaluateEvent = __bind(this.evaluateEvent, this);

      this.resetEvents = __bind(this.resetEvents, this);

      this.vanGogh = __bind(this.vanGogh, this);

      this.once = __bind(this.once, this);

      this.on = __bind(this.on, this);

      this.registerEventArguments = __bind(this.registerEventArguments, this);

      this.destroyHandler = __bind(this.destroyHandler, this);

      this.getArgsForEvents = __bind(this.getArgsForEvents, this);

      this.possibleHandlersForSingleEvent = __bind(this.possibleHandlersForSingleEvent, this);

      this.setArgsForEvent = __bind(this.setArgsForEvent, this);

      this.setUnnamedArgsForEvent = __bind(this.setUnnamedArgsForEvent, this);

      this.setNamedArgsForEvent = __bind(this.setNamedArgsForEvent, this);

      this.hasFired = __bind(this.hasFired, this);
      this._globalEventHandlers = {};
      this._hasFired = {};
      this._entries = {};
      this._argumentNames = {};
      this._firedEventArgumentStore = {};
    }

    Switchboard.prototype.hasFired = function(eventNames, val) {
      var allFired, eventName, _i, _len;
      if (!(eventNames instanceof Array)) {
        eventNames = [eventNames];
      }
      allFired = true;
      for (_i = 0, _len = eventNames.length; _i < _len; _i++) {
        eventName = eventNames[_i];
        if (val != null) {
          this._hasFired[eventName] = val;
        } else if (this._hasFired[eventName] !== true) {
          allFired = false;
          break;
        }
      }
      return allFired;
    };

    Switchboard.prototype.setNamedArgsForEvent = function(eventName, eventArgs) {
      var argName, i, _i, _len, _ref1, _results;
      _ref1 = this._argumentNames[eventName];
      _results = [];
      for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
        argName = _ref1[i];
        _results.push(this._firedEventArgumentStore[eventName][argName] = eventArgs[i]);
      }
      return _results;
    };

    Switchboard.prototype.setUnnamedArgsForEvent = function(eventName, eventArgs) {
      return this._firedEventArgumentStore[eventName] = eventArgs;
    };

    Switchboard.prototype.setArgsForEvent = function(eventName, eventArgs) {
      if (this._argumentNames[eventName] != null) {
        return this.setNamedArgsForEvent(eventName, argName, eventArgs[i]);
      } else {
        return this.setUnnamedArgsForEvent(eventName, eventArgs);
      }
    };

    Switchboard.prototype.possibleHandlersForSingleEvent = function(event) {
      var handler, handlers, _ref1;
      handlers = [];
      _ref1 = this._entries;
      for (uuid in _ref1) {
        handler = _ref1[uuid];
        if (__indexOf.call(handler.events, event) >= 0) {
          handlers.push(handler);
        }
      }
      return handlers;
    };

    Switchboard.prototype.getArgsForEvents = function(events) {
      var args, event, _i, _len;
      args = {};
      for (_i = 0, _len = events.length; _i < _len; _i++) {
        event = events[_i];
        args[event] = this._firedEventArgumentStore[event];
      }
      return args;
    };

    Switchboard.prototype.destroyHandler = function(fnOrUUID) {
      var event, eventsToUnlisten, handler, _i, _j, _len, _len1, _ref1, _ref2;
      handler = fnOrUUID;
      if (typeof fnOrUUID === 'string') {
        handler = this._entries[fnOrUUID];
      }
      eventsToUnlisten = handler.events;
      _ref1 = this._entries;
      for (uuid in _ref1) {
        handler = _ref1[uuid];
        _ref2 = handler.events;
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          event = _ref2[_i];
          if (__indexOf.call(eventsToUnlisten, event) >= 0) {
            eventsToUnlisten = eventsToUnlisten.filter(function(item) {
              return item !== event;
            });
          }
          if (eventsToUnlisten.length === 0) {
            break;
          }
        }
        if (eventsToUnlisten.length === 0) {
          break;
        }
      }
      for (_j = 0, _len1 = eventsToUnlisten.length; _j < _len1; _j++) {
        event = eventsToUnlisten[_j];
        this.removeListener(event, this._globalEventHandlers[event]);
      }
      return delete this._entries[handler.uuid];
    };

    Switchboard.prototype.registerEventArguments = function(events) {
      var args, event, _results;
      _results = [];
      for (event in events) {
        args = events[event];
        _results.push(this._argumentNames[event] = args);
      }
      return _results;
    };

    Switchboard.prototype.on = function(events, callback, once) {
      var event, event_uuid, handlerFn, i, new_entry, _i, _len,
        _this = this;
      if (once == null) {
        once = false;
      }
      if (!(events instanceof Array)) {
        events = [events];
      }
      event_uuid = nodeUUID.v4();
      new_entry = function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return callback.apply(null, args);
      };
      new_entry.uuid = event_uuid;
      new_entry.events = events;
      new_entry.once = once;
      this._entries[event_uuid] = new_entry;
      for (i = _i = 0, _len = events.length; _i < _len; i = ++_i) {
        event = events[i];
        if (this._globalEventHandlers[event] == null) {
          handlerFn = (function(event) {
            return function() {
              var args;
              args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
              return _this.evaluateEvent.apply(_this, [event].concat(__slice.call(args)));
            };
          })(event);
          this._globalEventHandlers[event] = handlerFn;
          if (once) {
            EventEmitter.prototype.once.call(this, event, handlerFn);
          } else {
            Switchboard.__super__.on.call(this, event, handlerFn);
          }
        }
      }
      return event_uuid;
    };

    Switchboard.prototype.once = function(events, callback) {
      return this.on(events, callback, true);
    };

    Switchboard.prototype.vanGogh = function(uuids) {
      var _i, _len, _results;
      if (!(uuids != null)) {
        uuids = Object.keys(this._entries);
      }
      if (!(uuids instanceof Array)) {
        uuids = [uuids];
      }
      _results = [];
      for (_i = 0, _len = uuids.length; _i < _len; _i++) {
        uuid = uuids[_i];
        _results.push(this.destroyHandler(uuid));
      }
      return _results;
    };

    Switchboard.prototype.resetEvents = function(events) {
      var event, _results;
      if (!(events != null)) {
        return this._hasFired = [];
      } else {
        if (!(events instanceof Array)) {
          events = [events];
        }
        _results = [];
        for (event in events) {
          _results.push(delete this._hasFired[event]);
        }
        return _results;
      }
    };

    Switchboard.prototype.evaluateEvent = function(eventName, eventArgs) {
      var args, handler, possibleHandlers, _i, _len, _results;
      this.hasFired(eventName, true);
      this.setArgsForEvent(eventName, eventArgs);
      possibleHandlers = this.possibleHandlersForSingleEvent(eventName);
      _results = [];
      for (_i = 0, _len = possibleHandlers.length; _i < _len; _i++) {
        handler = possibleHandlers[_i];
        if (this.hasFired(handler.events) === true) {
          args = this.getArgsForEvents(handler.events);
          handler(args);
          if (handler.once === true) {
            _results.push(this.destroyHandler(handler));
          } else {
            _results.push(void 0);
          }
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    return Switchboard;

  })((_ref = EventEmitter2 != null ? EventEmitter2 : EventEmitter) != null ? _ref : Emitter);

}).call(this);
